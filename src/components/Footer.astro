---
import { Sun, Moon, Monitor } from "@lucide/astro";
---

<footer class="flex justify-between items-center w-full px-8 md:px-0 mt-20 mb-10 text-zinc-700 dark:text-zinc-300">
    <p class="text-lg">© César García - <span id="current-year">{new Date().getFullYear()}</span></p>

    <!-- Theme Switcher -->
    <div class="flex items-center space-x-1 bg-zinc-100 dark:bg-zinc-800 rounded-full p-1">
        <button
            id="theme-light"
            class="theme-btn p-2 rounded-full transition-all duration-200 hover:bg-zinc-200 dark:hover:bg-zinc-700"
            data-theme="light"
            title="Modo claro"
        >
            <Sun size={18} />
        </button>
        <button
            id="theme-dark"
            class="theme-btn p-2 rounded-full transition-all duration-200 hover:bg-zinc-200 dark:hover:bg-zinc-700"
            data-theme="dark"
            title="Modo oscuro"
        >
            <Moon size={18} />
        </button>
        <button
            id="theme-system"
            class="theme-btn p-2 rounded-full transition-all duration-200 hover:bg-zinc-200 dark:hover:bg-zinc-700"
            data-theme="system"
            title="Modo sistema"
        >
            <Monitor size={18} />
        </button>
    </div>
</footer>

<script>
    // Theme management system
    class ThemeManager {
        private currentTheme: string;
        private readonly STORAGE_KEY = 'theme';
        
        constructor() {
            this.currentTheme = this.getStoredTheme() || 'system';
            this.initializeTheme();
            this.bindEvents();
        }
        
        private getStoredTheme(): string | null {
            if (typeof localStorage !== 'undefined') {
                return localStorage.getItem(this.STORAGE_KEY);
            }
            return null;
        }
        
        private setStoredTheme(theme: string): void {
            if (typeof localStorage !== 'undefined') {
                if (theme === 'system') {
                    localStorage.removeItem(this.STORAGE_KEY);
                } else {
                    localStorage.setItem(this.STORAGE_KEY, theme);
                }
            }
        }
        
        private getSystemTheme(): 'light' | 'dark' {
            if (typeof window !== 'undefined' && window.matchMedia) {
                return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
            }
            return 'light';
        }
        
        private applyTheme(theme: string): void {
            const html = document.documentElement;
            
            if (theme === 'system') {
                const systemTheme = this.getSystemTheme();
                html.classList.toggle('dark', systemTheme === 'dark');
            } else {
                html.classList.toggle('dark', theme === 'dark');
            }
        }
        
        private updateActiveButton(): void {
            const buttons = document.querySelectorAll('.theme-btn');
            buttons.forEach(button => {
                const buttonElement = button as HTMLButtonElement;
                const buttonTheme = buttonElement.dataset.theme;
                buttonElement.classList.toggle('active', buttonTheme === this.currentTheme);
            });
        }
        
        private initializeTheme(): void {
            this.applyTheme(this.currentTheme);
            this.updateActiveButton();
        }
        
        private bindEvents(): void {
            // Listen for button clicks
            document.addEventListener('click', (e) => {
                const target = e.target as HTMLElement;
                const button = target.closest('.theme-btn') as HTMLButtonElement;
                
                if (button) {
                    const theme = button.dataset.theme!;
                    this.setTheme(theme);
                }
            });
            
            // Listen for system theme changes
            if (typeof window !== 'undefined' && window.matchMedia) {
                window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
                    if (this.currentTheme === 'system') {
                        this.applyTheme('system');
                    }
                });
            }
        }
        
        public setTheme(theme: string): void {
            this.currentTheme = theme;
            this.setStoredTheme(theme);
            this.applyTheme(theme);
            this.updateActiveButton();
        }
    }
    
    // Initialize theme manager when DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
        new ThemeManager();
    });
</script>